/**
 * tbrpg – Text based roll playing game
 * 
 * Copyright © 2012  Mattias Andrée (maandree@kth.se)
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

RuleSet                                  ; Game rules
	char attack_roll_die             ; The number of sides on the dice to roll at the attack roll
	char attack_roll_dice            ; The number of dice to roll at the attack roll
	char critical_hit                ; The minimum attack roll needed for a critical hit
	char critical_miss               ; The maximum attack roll needed for a critical miss
	ReputationChart reputation_chart ; The reputation chart
	AbilityChart ability_chart       ; The ability chart
	Inventory inventory_prototype    ; The inventory prototype, basiclly it defines how many slots there is in the inventory
	std::vector<Spell> spells        ; All spells, very useful for when new characters selects spells, or to restrict imported characters
	std::vector<Race> races          ; Races in the game that new charactes can chooses

ReputationChart                          ; Reputation chart
	int[] reaction_adjustment        ; Reaction adjustment for each reputation
	bool[] wanted                    ; Whether the party is wanted for each reputation
	int[] killing_innocent           ; Penalty for killing a innocent for each reputation
	int[] injuring_innocent          ; Penalty for injuring a innocent for each reputation
	int[] stealing                   ; Penalty for stealing for each reputation
	int[] killing_guard              ; Penalty for killing a guard for each reputation
	int[] donation_needed            ; Donation needed to increase reputation for each reputation, zero for not possible
	float[] price_adjustment         ; Price multiplier for each reputation
	signed char[] good_reaction      ; Reaction form good aligned for each reputation
	signed char[] neutral_reaction   ; Reaction form neutral aligned for each reputation
	signed char[] evil_reaction      ; Reaction form evil aligned for each reputation
	char[] alignment_reputation      ; Reputation for each alignment of the protagonist

Bonuses                                  ; Bonuses
	int hit_bonus                    ; Hit bonus
	int damage_bonus                 ; Damage bonus
	int carry_limit                  ; Weight carry limit in grams
	float bashing                    ; Bashing chance
	int missile_attack_bonus         ; Missile attack bonus
	int armour_class_bonus           ; Armour class bonus
	int hit_point_bonus              ; Hit point bonus
	float resurrectability           ; Resurrectability
	int reaction_bonus               ; Reaction bonus
	char spell_level_limit           ; Spell level limit
	float spell_learn                ; Chance to learn spell
	char max_spells_level            ; Maximum learned spells per limit
	int lore_bonus                   ; Lore bonus
	float magic_defence_bonus        ; Resistance against magic bonus
	float spell_failure              ; Chance to fail spell casting
	std::vector<int> bonus_spells    ; Extra spell slots per spell level
	int morale                       ; Morale bonus
	int luck                         ; Luck bonus
	float detect_doors               ; Detect secret door bonus

Defence                                  ; Defence class
	int melee                        ; Armour class versus melée bonus
	int missile                      ; Armour class versus missile bonus
	float fire                       ; Resistance against fire bonus
	float cold                       ; Resistance against cold bonus
	float lightning                  ; Resistance against lightning bonus
	float acid                       ; Resistance against acid bonus
	float poison                     ; Resistance against poison bonus
	float physical                   ; Resistance against physical damage bonus

ThiefAbilities                           ; Thief abilities
	int find_traps                   ; Find traps scores
	int open_locks                   ; Open locks scores
	int pick_pockets                 ; Pick pockets scores
	int stealth                      ; Stealth scores

SavingThrows                             ; Saving throws
	int breath                       ; Save versus breath weapons
	int paralyze_poison_death        ; Save versus paralyzation/poison/death magic
	int petrification_polymorph      ; Save versus petrification/polymorph
	int rod_staff_wand               ; Save versus rods/staffs/wands
	int spell                        ; Save versus spells

Abilities                                ; Ability scores
	short strength                   ; The strength, excluding extra for 18
	short strength18                 ; Extra strength for strength 18
	short constitution               ; The constitution
	short dexterity                  ; The dexterity
	short intelligence               ; The intelligence
	short wisdom                     ; The wisdom
	short charisma                   ; The charisma

Party                                               ; The players' party
	int reputation                              ; The party's reputation
	std::vector<Character> characters           ; The characters in the party

ExperienceChart                                     ; Experience chart
	std::vector<int> experience                 ; Required experience for each level
	std::vector<char> hit_point_die             ; The number of sides of the dice to roll that determines the hit points gained when a level is reached
	std::vector<char> hit_point_dice            ; The number of dice to roll that determines the hit points gained when a level is reached
	std::vector<int> hit_point_bonus            ; Hit points gained when a level is reached
	std::vector<int> selectable_wizard          ; The number of wizard spells that can be selected for learning when a level is reached
	std::vector<int> selectable_priest          ; The number of priest spells that can be selected for learning when a level is reached
	std::vector<std::vector<Spell>> new_spells  ; Spells that are learned to when a level is reached
	std::vector<int> proficiencies	            ; The number of proficiencies that that can be allocated when a level is reached

SpellProgression                                    ; Spell progression chart
	std::vector<std::vector<int>> wizard_slots  ; The number of wizard spell slots per character level and spell level
	std::vector<std::vector<int>> priest_slots  ; The number of priest spell slots per character level and spell level
	std::vector<int> wizard_levels              ; Wizard castings level for each prestige level
	std::vector<int> priest_levels              ; Priest castings level for each prestige level

Ammunition: Item                                    ; Ammunition item class
	int hit_bonus                               ; The hit bonus the ammunition brings
	char damage_die                             ; The number of sides on the dice rolled to determine the inflicted damage
	char damage_dice                            ; The number dice rolled to determine the inflicted damage
	int damage_bonus                            ; Damage modifier
	RangedWeapon usable_with                    ; Weapon that the ammunition can be used with
	DamageType damage_type                      ; The damage type inflicted by the ammunition

Weapon: RightHandItem                               ; Weapon item class
	char hands                                  ; The number of hands required for the weapon
	char speed_factor                           ; The weapon's speed factor
	int hit_bonus                               ; The hit bonus the weapon brings
	char damage_die                             ; The number of sides on the dice rolled to determine the inflicted damage
	char damage_dice                            ; The number dice rolled to determine the inflicted damage
	int damage_bonus                            ; Damage modifier
	bool melee                                  ; Whether the weapon is a melée weapon
	std::vector<DamageType> damage_type         ; The damage type, if multiple, one fill be selected at uniform random for each attack
	WeaponGroup weapon_group                    ; The weapon group

Headgear: Item                           ; Headgear item class
	bool critical_hit_protection     ; Whether the item protects agains critical hits

DamageType                               ; Damage type
	std::string name                 ; The name of the damage type

WeaponGroup                              ; Weapon group
	std::string name                 ; The name of the weapon group

Proficiency                              ; Weapon proficiency level
	int hit_bonus                    ; The hit bonus
	int damage_bonus                 ; The damage bonus
	char half_attacks                ; the number of half attacks

QuestItem: Item                          ; Quest item class
	int id                           ; A unique number for the item that the game senario can use for identifying quest items

Item                                                                       ; Item class
	std::string name                                                   ; The name of the item
	std::string description                                            ; Description of the item, text scrolls should use this for their text
	int armour_class                                                   ; The armour class, use 2³¹ − 1 for none
	int weight                                                         ; The wieght of the item, in grams
	bool identified                                                    ; Whether the item is identified
	int lore_value                                                     ; The lore needed to identify the item by examining it
	bool stuck                                                         ; Whether the item is stuck in its position
	bool cursed                                                        ; Whether the item is cursed
	int quantity                                                       ; The current quantity
	int quantity_limit                                                 ; The quantity limit
	int unit_value                                                     ; The monetary value of each item
	AbilityBonus bonuses                                               ; Ability bonuses
	std::unordered_map<DamageType, int> armour_class_modifiers         ; Armour class modifiers for the damage types

ActionSlotChart	                                                           ; Prestige class–action slot cart
	std::unordered_map<Class, long long> index_map                     ; Prestige class to OR:able index map
	std::unordered_map<long long, std::vector<ActionSlot>> slot_map    ; Index combination to action slots map

Class                                                                      ; Prestige class
	int hit_points                                                     ; Minimum starting hit points
	int thac0                                                          ; THAC0
	int lore_bonus                                                     ; Lore bonus per level
	bool[] alignments                                                  ; Allowed alignments
	bool learn_from_scroll                                             ; Whether the character can learn wizard spells from scrolls
	char proficiencies_each                                            ; The number of proficiencies scores that may be assigned to each weapon proficiency for new level 1 characters
	ExperienceChart experience_chart                                   ; The class's experience chart
	SpellProgression spell_progression                                 ; The class's spell progression chart
	AbilityBonus abilities                                             ; Abilties
	Abilities lower_limits                                             ; Lower ability bounds
	std::vector<Spell> special_abilities                               ; Special abilities
	std::unordered_map<Item, bool> can_use                             ; Usable items
	std::vector<MagicSchool> specialisations                           ; Availiable specialisations for the class
	std::unordered_map<WeaponGroup, std::vector<Proficiency>> proficiency_chart  ; Proficiency chart
	Weapon default_one_hand                                                      ; Weapon used when the character has his left hand free but is holding a shield
	Weapon default_two_hand                                                      ; Weapon used when the character has both his hands free

Race                                                                       ; Race class
	std::vector<std::vector<Class>> allowed_classes                    ; Allowed classes for the race
	short dualclass_level                                              ; At which level the dual class is allowed, use 2³¹ − 1 for never
	AbilityBonus bonuses                                               ; Bonuses for the race

CharacterSheet                                                             ; Character sheet
	std::string name                                                   ; The name of the character
	std::string biography                                              ; The character's biography
	char colour                                                        ; The character's name colouration
	char alignment                                                     ; The character's alignment
	std::string portrait                                               ; The character's portrait in printable data
	bool female                                                        ; Whether the characters is female
	std::vector<int> experience                                        ; The character's experiences for its classes
	std::vector<char> level                                            ; The character's levels for its classes
	std::vector<bool> class_abondoned                                  ; For each of the character's classes, whether the class is abondoned by dual classing
	std::unordered_map<WeaponGroup, int> proficiencies                 ; The character's weapon proficiencies
	std::vector<Spell> affected_by                                     ; Spells the character is affected by
	Inventory inventory                                                ; The character's inventory
	AbilityBonus abilities                                             ; The character's abilities
	SpellBook spells                                                   ; The character's spell book
	Race race                                                          ; The character's race
	Race racial_enemy                                                  ; The character's racial enemy
	std::vector<Class> prestige                                        ; The character's prestige classes
	MagicSchool specialisation                                         ; The character's magic school specialisation
	std::vector<Spell> special_abilities                               ; The character's special abilities

Character                                 ; Character
	int hit_points                    ; Current hit points
	char alive                        ; Alive status, 0 for dead, 1 for alive, −1 for beyond ressurection
	int morale                        ; Current morale
	int intoxication                  ; Current intoxication level
	int fatigue                       ; Number of turns since the character last slept with consideration for long travels
	char extra_attacks                ; Extra attacks, increased by one when warriors reach level 7
	CharacterSheet record             ; The character sheet

MagicSchool                               ; Magic school class
	std::string name                  ; The name of the school
	std::string coluration            ; The colouration of the magic in the school
	std::string practicer             ; The name of the practicers of the school
	std::vector<MagicSchool> opposite ; The opposite schools

Spell                                     ; Spell class
	std::string name                  ; Spell name
	std::string description           ; Spell description
	bool wizard                       ; Whether the spell is a wizard spell
	bool priest                       ; Whether the spell is a priest spell
	char level                        ; Spell level
	char saving                       ; Saving, 0 for none, 1 for half and 2 for negation
	bool touch                        ; Whether the spell's range is touching
	float range                       ; Whether the spell's range, negative for touch without zero
	char casting_time                 ; Casting time
	char duration                     ; Duration modifier
	char duration_die                 ; Duration die side count
	char duration_dice                ; Duration die count
	std::string effect_area           ; Area of effect
	signed char offensiveness         ; 1 if offensive, −1 if defensive and 0 if informative
	MagicSchool school                ; Magic shool

AbilityChart                              ; Ability chart
	AbilityBonus[] strength           ; Strength chart
	AbilityBonus[] strength18         ; Strength 18/?? chart
	AbilityBonus[] dexterity          ; Dexterity chart
	AbilityBonus[] constitution       ; Constitution chart
	AbilityBonus[] intelligence       ; Intelligence chart
	AbilityBonus[] wisdom             ; Wisdom chart
	AbilityBonus[] charisma           ; Charisma chart

Inventory                                  ; Character inventory class
	std::vector<Weapon> left_hand      ; Left hand item slots
	RightHandItem right_hand           ; Right hand item slot
	std::vector<Ammunition> quiver     ; Quiver slots
	std::vector<QuickItem> quick_items ; Quick item slots
	Headgear headgear                  ; Headgear slots
	Amulett amulett                    ; Amulette and necklace slot
	std::vector<Ring> rings            ; Ring slots
	BodyArmour body                    ; Body armour slot
	Gauntlets gauntlets                ; Gauntlet and bracer slots
	Girdle girdle                      ; Girdle and belt slot
	Boots boots                        ; Boot slot
	Cloak cloak                        ; Cloak slot
	std::vector<Item> personal         ; Personal inventory slots

Body: Item                                ; Character body item class
	Character character               ; The dead character

AbilityBonus                              ; Abilities bonus class
	Bonuses bonuses                   ; Bonuses
	ThiefAbilities thief_abilities    ; Thief abilities
	SavingThrows saving_throws        ; Saving throws
	Abilities abilities               ; Abilities
	SpellBook spells                  ; Spells
	std::vector<Spell> effects        ; Effects
	Defence defence                   ; Defences

SpellBook                                 ; Character spell book
	std::vector<Spell> learned        ; Learned spells
	std::vector<Spell> memorised      ; Memorisations

Container: Item                           ; Item container item class
	std::vector<Item> contains        ; Items contained by the container
	int contain_limit                 ; Number of items that can be put in the container
	float weight_modifier             ; Weight multiplier
	std::vector<Item> can_contain     ; Items that can be put inside the container

RangedWeapon: Weapon                      ; Ranged weapon item class
	char rate_of_fire                 ; The weapon's rate of fire

Shield: RightHandItem                                      ; Shield item class
	bool protect_missile                               ; Whether the shield protects against missiles
	std::unordered_map<DamageType, bool> protect_melee ; Whether the shield protects against different damage types in melée battle

BodyArmour: Item                          ; Body armour item class
	bool wizard_magic_use             ; Whether wizard spells can be casted while wearing the armour

Mace: BluntWeapon                         ; Mace item class
Fist: BluntWeapon                         ; One-handed hand-to-hand class
Club: BluntWeapon                         ; Club item class
Flail: BluntWeapon                        ; Flail item class
Torch: BluntWeapon                        ; Torch item class
MorningStar: BluntWeapon                  ; Morning star item class
BluntWeapon: OneHandedMelee               ; Blunt weapon item class
WarHammer: OneHandedMelee                 ; War hammer item class
Dagger: OneHandedMelee                    ; Dagger item class
BattleAxe: OneHandedMelee                 ; Battle axe item class
ShortSword: OneHandedMelee                ; Short sword item class
LargeSword: OneHandedMelee                ; Large sword item class
LongSword: LargeSword                     ; Long sword item class
BastardSword: LargeSword                  ; Bastard sword item class
OneHandedMelee: MeleeWeapon               ; One-handed melée weapon item class
TwoHandedMelee: MeleeWeapon               ; Two-handed melée weapon item class
MeleeWeapon: Weapon                       ; Melée weapon item class
TwoHandedSword: TwoHandedMelee            ; Two-handed weapon item class
Halberd: TwoHandedMelee                   ; Halberd item class
Fists: TwoHandedMelee                     ; Two-handed hand-to-hand class
Spear: TwoHandedMelee                     ; Spear item class
Quarterstaff: TwoHandedMelee              ; Quarterstaff item class
ThrowingAxe: Throwing                     ; Throwing axe item class
ThrowingDagger: Throwing                  ; Throwing dagger item class
Dart: Throwing                            ; Dart item cals
Throwing: RangedWeapon                    ; Throwing weapon item class
Bow: RangedWeapon                         ; Bow item class
Sling: RangedWeapon                       ; Sling item class
Crossbow: RangedWeapon                    ; Crossbow item class
HeavyCrossbow: Crossbow                   ; Heavy crossbow item class
LightCrossbow: Crossbow                   ; Light crossbow item class
CompositeLongBow: Bow                     ; Composite long bow item class
LongBow: Bow                              ; Long bow item class
ShortBow: Bow                             ; Short bow item class
Buckler: Shield                           ; Buckler item class
SmallShield: Shield                       ; Small shield item class
MediumShield: Shield                      ; Medium shield item class
LargeShield: Shield                       ; Large shield item class
Arrow: Ammunition                         ; Arrow item class
Bullet: Ammunition                        ; Sling stone item class
Bolt: Ammunition                          ; Bolt item class
QuickItem: Item                           ; Quick item item class
Potion: QuickItem                         ; Potion item class
Scroll: QuickItem                         ; Magic scroll item class
Wand: QuickItem                           ; Wand, rod and magic staff item class
Hat: Headgear                             ; Hat item class
Hood: Headgear                            ; Hood item class
Helmet: Headgear                          ; Helmet item class
Robe: BodyArmour                          ; Robe item class
LeatherArmour: BodyArmour                 ; Leather armour item class
StuddedLeatherArmour: BodyArmour          ; Studded leather armour item class
ChainMail: BodyArmour                     ; Chain mail item clss
SplintMail: BodyArmour                    ; Splint mail item clss
PlateMail: BodyArmour                     ; Plate mail item clss
FullPlateMail: BodyArmour                 ; Full plate mail item clss
RightHandItem: Item                       ; Item that can be placed in the right hand
Gold: Gem                                 ; Gold item class
Gem: Item                                 ; Gem item class
Key: QuestItem                            ; Key item class
TextScroll: Item                          ; Text scroll item class
Ring: Item                                ; Ring item class
Amulett: Item                             ; Amulett and necklace item class
Girdle: Item                              ; Girdle and belt item class
Boots: Item                               ; Boot item class
Gauntlets: Item                           ; Gauntlet and bracer item class
Cloak: Item                               ; Cloak item class
Mage: Wizard                              ; The mage class
Sorcerer: Wizard                          ; The sorcerer class
Cleric: Priest                            ; The cleric class
Druid: Priest                             ; The druid cass
Bard: Rogue                               ; The bard class
Thief: Rogue                              ; The thief class
Fighter: Warrior                          ; The fighter class
Ranger: Warrior                           ; The ranger class
Paladin: Warrior                          ; The paladin class
Wizard: Class                             ; The wizard superclass
Priest: Class                             ; The priest superclass
Rogue: Class                              ; The rogue superclass
Warrior: Class                            ; The warrior superclass
Elf: Race                                 ; The elf race
Human: Race                               ; The human race
HalfOrc: Race                             ; The half-orc race
HalfElf: Race                             ; The half-elf race
Dwarf: Race                               ; The dwarf race
Halfling: Race                            ; The halfling race
Gnome: Race                               ; The gnome race
LowScroll: Scroll                         ; Magic scroll so simple anyone can use it
PriestScroll: Scroll                      ; Priest magic scroll
WizardScroll: Scroll                      ; Wizard magic scroll
HighWand: Wand                            ; High order magic wand
LowWand: Wand                             ; Low order magic wand

Lockable                                  ; Lockable object
	bool locked                       ; Whether the object is locked
	int pick_level                    ; The lowest value needed from 1D20 roll, with modifiers, to be able to pick the lock
	int bash_level                    ; The lowest value needed from 1D20 roll, with modifiers, to be able to bash the lock
	bool pickable                     ; Whether the lock is pickable
	bool bashable                     ; Whether the lock is bashable

Entrance                                  ; Connection between map areas
	bool usable                       ; Whether the entrance can be used
	std::string description           ; A description of what you see
	std::string direction             ; The direction to the entrace
	_MapMinor leads_to                ; The area to which the entrance leads

_MapMinor                                           ; Used to break circular dependency, all instances must be instances of {@link MapMinor}
MapMinor: _MapMinor                                 ; Map area
	std::string description                     ; Descrion of the area
	bool may_rest                               ; Whether you may rest in the area without renting a room
	float area                                  ; The radius of the area, in metres, the party starts at origo
	std::vector<Road> roads                     ; Roads to other major areas in the area
	std::vector<Entrance> connections           ; Entrance to other areas in the area
	std::vector<Item> items                     ; Items in the area
	std::vector<Creature> creatures             ; Creatures in the area
	MapMajor is_in                              ; Which major area to which  the area belongs
	std::vector<RestInterruption> interruptions ; Possible rest interruptions

RestInterruption                          ; A possible rest interruption
	char interrupt_die                ; The number of sides on the dice to roll to determine whether your sleeps is being interrupted
	char interrupt_dice               ; The number dice to roll to determine whether your sleeps is being interrupted
	unsigned char interrupt_risk      ; The highest value for at which your gets interrupted, use 0 for never, and 255 for always
	std::vector<Creature> creatures   ; Creatures that will be summoned

Creature: Character                       ; A creature in the area
	bool hostile                      ; Whether the creature is hostile
	float x                           ; The creatures horizontal position in metres, the parties starts at 0
	float y                           ; The creatures vertical position in metres, the parties starts at 0
	bool alive                        ; Whether the creature is alive, the game senario is allowed to have it dead and the set it to live to simulate the creature being new
	bool resurrect                    ; Whether the creature is resurrected when the party leaves the area

Map                                       ; The world map
	MapMinor start                    ; The start area of the game senario
	std::vector<MapMajor> majors      ; All major areas in the world map

MapMajor                                  ; Areas on the world map
	std::string name                  ; The name of the area
	bool visible                      ; Whether the area is on the parties map
	bool visited                      ; Whether the area has been visited
	bool visitable                    ; Whether the area is visitable
	bool detectable                   ; Whether the area is detectable

Road                                      ; A road between major map area
	int first_distance                ; Distance to the waylay point in metres
	int last_distance                 ; Distance from the waylay point in metres
	char waylay_die                   ; The number of sides on the dice to roll to determine whether you are being waylaid
	char waylay_dice                  ; The number dice to roll to determine whether you are being waylaid
	unsigned char waylay_risk         ; The highest value for at which you get waylaid, use 0 for never, and 255 for always
	std::string direction             ; At which direction the road is located and leads
	_MapMinor waylay_map              ; The area entered if you get waylaid
	_MapMinor leads_to                ; The area to which the the road leads

EnvironmentContainer: Container, Lockable ; Item container that are in the environments
Door: Entrance, Lockable                  ; Door separating environments
Wilderness: MapMinor                      ; Wilderness outdoors environment
Town: MapMinor                            ; Town outdoors environment
House: MapMinor                           ; Indoors environment


RuleSet
	char attack_roll_dice
	char attack_roll_dices
	char critical_hit
	char critical_miss
	ReputationChart reputation_chart
	AbilityChart ability_chart
	Inventory inventory_prototype
	Spell[] spells
	Race[] allowed_races

ReputationChart
	int[] reaction_adjustment
	bool[] wanted
	int[] killing_innocent
	int[] injuring_innocent
	int[] stealing
	int[] killing_guard
	int[] donation_needed
	float[] price_adjustment
	int[] good_reaction
	int[] neutral_reaction
	int[] evil_reaction
	char[] alignment_reputation

Bonuses
	int hit_bonus
	int damage_bonus
	int carry_limit
	float bashing
	int missile_attack_bonus
	int armour_class_bonus
	int hit_point_bonus
	float resurrectability
	int reaction_bonus
	char spell_level_limit
	float spell_learn
	char max_spells_level
	int lore_bonus
	int magic_defence_bonus
	float spell_failure
	int[] bonus_spells
	int morale
	int luck
	float detect_doors

Defence
	int melee
	int missile
	float fire
	float cold
	float lightning
	float acid
	float poison
	float physical

ThiefAbilities
	int find_traps
	int open_locks
	int pick_pockets
	int stealth

SavingThrows
	int breath
	int paralyze_poison_death
	int petrification_ponymorph
	int rod_staff_wand
	int spell

Ablities
	char strength
	char strength18
	char constitution
	char dexterity
	char intelligence
	char wisdom
	char charisma

Party
	int reputation
	Character[] characters

ExperienceChart
	int[] experience
	char[] hit_dices
	char[] hit_dice
	int[] hit_bonus

SpellProgression
	int[][] wizard_slots
	int[][] priest_slots

Ammunition
	int hit_bonus
	char damage_dice
	char damage_dices
	int damage_bonus
	DamageType[] damage_type
	RangedWeapon usable_with

Weapon: RightHandItem
	char hands
	char speed_factor
	char rate_of_fire
	int hit_bonus
	char damage_dice
	char damage_dices
	int damage_bonus
	bool melee
	DamageType[] damage_type
	WeaponGroup weapon_group

Headgear: Item
	bool critical_hit_protection

DamageType
	std::string name

WeaponGroup
	std::string name

Proficiency
	int hit_bonus
	int damage bonus
	char half_attacks

QuestItem: Item
	int id

Item
	std::string name
	std::string description
	int armour_class
	int weight
	bool identified
	int lore_value
	bool stuck
	bool cursed
	int quantity
	int quantity_limit
	int unit_value
	AbilityBonus bonuses
	std::unorderd_map<DamageType, int> armour_class_modifiers

ActionSlotChart	
	std::unorderd_map<Class, long long> index_map
	std::unorderd_map<long long, ActionSlots[]> slot_map

Class
	int hit_points
	int thac0
	int lore_bonus
	bool[] alignments
	bool learn_from_scroll
	char proficiencies_each
	char proficiencies_total
	ExperienceChart experience_chart
	SpellProgression spell_progression
	AbilityBonus abilities
	Abilites lower_limits
	Spell[] special_abilties
	Item[] can_use
	std::unorderd_map<WeaponGroup, Proficiencies[]> proficiency_chart
	Weapon default_one_hand
	Weapon default_two_hand

Race
	Class[][] allowed_classes
	AbilityBonus bonuses

CharacterSheet
	std::string name
	std::string biography
	char colour
	char alignment
	std::string portrait
	bool female
	int[] experience
	char[] level
	bool[] class_abondoned
	std::unorderd_map<WeaponGroup, int> proficiencies
	std::vector<Spell> affected_by
	Inventory inventory
	AbiltyBonus abilities
	SpellBook spells
	Race race
	Race racial_enemy
	Class[] prestige
	MagicSchool specialisation
	std::vector<Spell> special_abilities

Character                                 ; Character
	int hit_points                    ; Current hit points
	char alive                        ; Alive status, 0 for dead, 1 for alive, −1 for beyond ressurection
	int morale                        ; Current morale
	int intoxication                  ; Current intoxication level
	int fatigue                       ; Number of turns since the character last slept with consideration for long travels
	CharacterSheet record             ; The character sheet

MagicSchool                               ; Magic school class
	std::string name                  ; The name of the school
	std::string coluration            ; The colouration of the magic in the school
	std::string practicer             ; The name of the practicers of the school
	MagicSchool[] opposite            ; The opposite schools

Spell                                     ; Spell class
	std::string name                  ; Spell name
	std::string description           ; Spell description
	bool wizard                       ; Whether the spell is a wizard spell
	bool priest                       ; Whether the spell is a priest spell
	char level                        ; Spell level
	char saving                       ; Saving, 0 for none, 1 for half and 2 for negation
	bool touch                        ; Whether the spell's range is touching
	float range                       ; Whether the spell's range, negative for touch without zero
	char casting_time                 ; Casting time
	char duration                     ; Duration modifier
	char duration_dice                ; Duration dice side count
	char duration_dices               ; Duration dice count
	std::string effect_area           ; Area of effect
	MagicSchool school                ; Magic shool

AbilityChart                              ; Ability chart
	AbilityBonus[] strength           ; Strength chart
	AbilityBonus[] strength18         ; Strength 18/* chart
	AbilityBonus[] dexterity          ; Dexterity chart
	AbilityBonus[] constitution       ; Constitution chart
	AbilityBonus[] intelligence       ; Intelligence chart
	AbilityBonus[] wisdom             ; Wisdom chart
	AbilityBonus[] charisma           ; Charisma chart

Inventory                                 ; Character inventory class
	Weapon[] left_hand                ; Left hand item slots
	RightHandItem right_hand          ; Right hand item slot
	Ammunition[] quiver               ; Quiver slots
	QuickItem[] quick_items           ; Quick item slots
	Headgear headgear                 ; Headgear slots
	Amulett amulett                   ; Amulette and necklace slot
	Ring[] rings                      ; Ring slots
	BodyArmour body                   ; Body armour slot
	Gauntlets gauntlets               ; Gauntlet and bracer slots
	Girdle girdle                     ; Girdle and belt slot
	Boots boots                       ; Boot slot
	Cloak cloak                       ; Cloak slot
	Item[] personal                   ; Personal inventory slots

Body: Item                                ; Character body item class
	Character character               ; The dead character

Ammunition: Item                          ; Ammunition item class
	RangedWeapon usable_with          ; Weapon that the ammunition can be used with
	DamageType damage_type            ; The damage type inflicted by the ammunition

AbilityBonus                              ; Abilities bonus class
	Bonuses bonuses                   ; Bonuses
	ThiefAbilities thief_abilities    ; Thief abilities
	SavingThrows saving_throws        ; Saving throws
	Abilities abilities               ; Abilities
	SpellBook spells                  ; Spells
	Spell[] effects                   ; Effects

SpellBook                                 ; Character spell book
	std::vector<Spell> learned        ; Learned spells
	std::vector<Spell> memorised      ; Memorisations

Container: Item                           ; Item container item class
	std::vector<Item> contains        ; Items contained by the container
	int contain_limit                 ; Number of items that can be put in the container
	float weight_modifier             ; Weight multiplier
	Item[] can_contain                ; Items that can be put inside the container

Mace: BluntWeapon                         ; Mace item class
Fist: BluntWeapon                         ; One-handed hand-to-hand class
Club: BluntWeapon                         ; Club item class
Flail: BluntWeapon                        ; Flail item class
Torch: BluntWeapon                        ; Torch item class
MorningStar: BluntWeapon                  ; Morning star item class
BluntWeapon: OneHandedMelee               ; Blunt weapon item class
WarHammer: OneHandedMelee                 ; War hammer item class
Dagger: OneHandedMelee                    ; Dagger item class
BattleAxe: OneHandedMelee                 ; Battle axe item class
ShortSword: OneHandedMelee                ; Short sword item class
LargeSword: OneHandedMelee                ; Large sword item class
LongSword: LargeSword                     ; Long sword item class
BastardSword: LargeSword                  ; Bastard sword item class
OneHandedMelee: MeleeWeapon               ; One-handed melée weapon item class
TwoHandedMelee: MeleeWeapon               ; Two-handed melée weapon item class
MeleeWeapon: Weapon                       ; Melée weapon item class
TwoHandedSword: TwoHandedMelee            ; Two-handed weapon item class
Halberd: TwoHandedMelee                   ; Halberd item class
Fists: TwoHandedMelee                     ; Two-handed hand-to-hand class
Spear: TwoHandedMelee                     ; Spear item class
Quarterstaff: TwoHandedMelee              ; Quarterstaff item class
ThrowingAxe: Throwing                     ; Throwing axe item class
ThrowingDagger: Throwing                  ; Throwing dagger item class
Dart: Throwing                            ; Dart item cals
Throwing: RangedWeapon                    ; Throwing weapon item class
RangedWeapon: Weapon                      ; Ranged weapon item class
Bow: RangedWeapon                         ; Bow item class
Sling: RangedWeapon                       ; Sling item class
Crossbow: RangedWeapon                    ; Crossbow item class
HeavyCrossbow: Crossbow                   ; Heavy crossbow item class
LightCrossbow: Crossbow                   ; Light crossbow item class
CompositeLongBow: Bow                     ; Composite long bow item class
LongBow: Bow                              ; Long bow item class
ShortBow: Bow                             ; Short bow item class
Shield: RightHandItem                     ; Shield item class
Buckler: Shield                           ; Buckler item class
SmallShield: Shield                       ; Small shield item class
MediumShield: Shield                      ; Medium shield item class
LargeShield: Shield                       ; Large shield item class
Arrow: Ammunition                         ; Arrow item class
Bullet: Ammunition                        ; Sling stone item class
Bolt: Ammunition                          ; Bolt item class
QuickItem: Item                           ; Quick item item class
Potion: QuickItem                         ; Potion item class
Scroll: QuickItem                         ; Magic scroll item class
Wand: QuickItem                           ; Wand, rod and magic staff item class
Hat: Headgear                             ; Hat item class
Hood: Headgear                            ; Hood item class
Helmet: Headgear                          ; Helmet item class
BodyArmour: Item                          ; Body armour item class
Robe: BodyArmour                          ; Robe item class
LeatherArmour: BodyArmour                 ; Leather armour item class
StuddedLeatherArmour: BodyArmour          ; Studded leather armour item class
ChainMail: BodyArmour                     ; Chain mail item clss
SplintMail: BodyArmour                    ; Splint mail item clss
PlateMail: BodyArmour                     ; Plate mail item clss
FullPlateMail: BodyArmour                 ; Full plate mail item clss
RightHandItem: Item                       ; Item that can be placed in the right hand
Gold: Gem                                 ; Gold item class
Gem: Item                                 ; Gem item class
Key: QuestItem                            ; Key item class
TextScroll: Item                          ; Text scroll item class
Ring: Item                                ; Ring item class
Amulett: Item                             ; Amulett and necklace item class
Girdle: Item                              ; Girdle and belt item class
Boots: Item                               ; Boot item class
Gauntlets: Item                           ; Gauntlet and bracer item class
Cloak: Item                               ; Cloak item class
Mage: Wizard                              ; The mage class
Sorcerer: Wizard                          ; The sorcerer class
Cleric: Priest                            ; The cleric class
Druid: Priest                             ; The druid cass
Bard: Rogue                               ; The bard class
Thief: Rogue                              ; The thief class
Fighter: Warrior                          ; The fighter class
Ranger: Warrior                           ; The ranger class
Paladin: Warrior                          ; The paladin class
Wizard: Class                             ; The wizard superclass
Priest: Class                             ; The priest superclass
Rogue: Class                              ; The rogue superclass
Warrior: Class                            ; The warrior superclass
Elf: Race                                 ; The elf race
Human: Race                               ; The human race
HalfOrc: Race                             ; The half-orc race
HalfElf: Race                             ; The half-elf race
Dwarf: Race                               ; The dwarf race
Halfling: Race                            ; The halfling race
Gnome: Race                               ; The gnome race
ActionSlot                                ; Action slot class

Lockable                                  ; Lockable object
	bool locked                       ; Whether the object is locked
	int pick_level                    ; The lowest value needed from 1D20 roll, with modifiers, to be able to pick the lock
	int bash_level                    ; The lowest value needed from 1D20 roll, with modifiers, to be able to bash the lock
	bool pickable                     ; Whether the lock is pickable
	bool bashable                     ; Whether the lock is bashable

Entrance                                  ; Connection between map areas
	bool usable                       ; Whether the entrance can be used
	std::string description           ; A description of what you see
	std::string direction             ; The direction to the entrace
	MapMinor leads_to                 ; The area to which the entrance leads

MapMinor                                  ; Map area
	std::string description           ; Descrion of the area
	bool may_rest                     ; Whether you may rest in the area without renting a room
	float area                        ; The radius of the area, in metres, the party starts at origo
	Road[] roads                      ; Roads to other major areas in the area
	Entrance[] connections            ; Entrance to other areas in the area
	std::vector<Item> items           ; Items in the area
	std::vector<Creature> creatures   ; Creatures in the area
	MapMajor is_in                    ; Which major area to which  the area belongs
	RestInterruption[] interruptions  ; Possible rest interruptions

RestInterruption                          ; A possible rest interruption
	char interrupt_dice               ; The number of sides on the dices to roll to determine whether your sleeps is being interrupted
	char interrupt_dices              ; The number dices to roll to determine whether your sleeps is being interrupted
	unsigned char interrupt_risk      ; The highest value for at which your gets interrupted, use 0 for never, and 255 for always
	Creature[] creatures              ; Creatures that will be summoned

Creature: Character                       ; A creature in the area
	bool hostile                      ; Whether the creature is hostile
	float x                           ; The creatures horizontal position in metres, the parties starts at 0
	float y                           ; The creatures vertical position in metres, the parties starts at 0
	boolean alive                     ; Whether the creature is alive, the game senario is allowed to have it dead and the set it to live to simulate the creature being new
	boolean resurrect                 ; Whether the creature is resurrected when the party leaves the area

Map                                       ; The world map
	MapMinor start                    ; The start area of the game senario
	MapMajor[] majors                 ; All major areas in the world map

MapMajor                                  ; Areas on the world map
	std::string name                  ; The name of the area
	bool visible                      ; Whether the area is on the parties map
	bool visited                      ; Whether the area has been visited
	bool visitable                    ; Whether the area is visitable
	bool detectable                   ; Whether the area is detectable

Road                                      ; A road between major map area
	int first_distance                ; Distance to the waylay point in metres
	int last_distance                 ; Distance from the waylay point in metres
	char waylay_dice                  ; The number of sides on the dices to roll to determine whether you are being waylaid
	char waylay_dices                 ; The number dices to roll to determine whether you are being waylaid
	unsigned char waylay_risk         ; The highest value for at which you get waylaid, use 0 for never, and 255 for always
	std::string direction             ; At which direction the road is located and leads
	MapMinor waylay_map               ; The area entered if you get waylaid
	MapMinor leads_to                 ; The area to which the the road leads

EnvironmentContainer: Container, Lockable ; Item container that are in the environments
Door: Entrance, Lockable                  ; Door separating environments
Wilderness: MapMinor                      ; Wilderness outdoors environment
Town: MapMinor                            ; Town outdoors environment
House: MapMinor                           ; Indoors environment

